#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 765)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'59,62,241,278,60,53,316,55,-131,268,-219,-133,268,-228,227,227,117,267',
'356,59,62,227,268,60,14,250,301,243,251,129,42,238,49,128,52,46,366',
'50,72,68,331,44,71,47,48,279,275,69,13,261,-131,70,-219,-133,12,-228',
'224,322,138,59,62,136,73,60,53,248,55,398,43,246,247,334,67,63,245,65',
'66,64,59,62,51,73,60,14,54,351,129,350,238,42,128,49,63,52,46,129,50',
'72,68,128,44,71,47,48,59,62,69,13,60,336,70,129,129,12,223,128,128,138',
'59,62,136,73,60,53,351,55,350,43,263,264,338,67,63,77,65,66,234,59,62',
'51,73,60,14,54,78,80,79,81,42,300,49,63,52,46,299,50,72,68,75,44,71',
'47,48,277,129,69,13,117,128,70,253,252,12,343,344,345,138,59,62,136',
'73,60,53,227,55,396,43,214,348,315,67,63,352,65,66,125,59,62,51,73,60',
'14,54,354,293,190,275,42,277,49,63,52,46,275,50,72,68,362,44,71,47,48',
'363,129,69,13,292,128,70,299,77,12,157,154,152,138,59,62,136,73,60,53',
'373,55,394,43,244,291,375,67,63,277,65,66,277,130,275,51,73,378,14,54',
'117,118,318,299,42,382,49,63,52,46,354,50,72,68,384,44,71,47,48,385',
'386,69,13,387,388,70,114,390,12,391,392,319,77,59,62,74,73,60,53,399',
'55,400,43,401,402,,67,63,82,65,66,,,,51,,,14,54,,,,105,42,109,49,104',
'52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,108,,,,59,62,,73,60,53,',
'55,,43,,,,67,63,82,65,66,83,,,51,,,14,54,,,,105,42,109,49,104,52,111',
',50,72,68,,44,71,,,,,69,13,,,70,,,12,108,,,,59,62,,73,60,53,,55,,43',
',84,85,67,63,82,65,66,83,,,51,,,14,54,,,,105,42,109,49,104,52,111,,50',
'72,68,,44,71,,,,,69,13,,,70,,,12,108,,,,59,62,,73,60,53,,55,,43,,84',
'85,67,63,82,65,66,83,,,51,,,14,54,,,,105,42,109,49,104,52,111,,50,72',
'68,,44,71,,,,,69,13,,,70,,,12,108,,,,59,62,,73,60,53,,55,,43,,,,67,63',
'82,65,66,83,,,51,,,14,54,,,,105,42,109,49,104,52,46,,50,72,68,,44,71',
'47,48,,,69,13,,,70,,,12,108,,,,59,62,,73,60,53,,55,,43,,84,85,67,63',
'82,65,66,83,,,51,,,14,54,,,,105,42,109,49,104,52,111,,50,72,68,,44,71',
',,,,69,13,,,70,,,12,108,,,,59,62,,73,60,53,,55,,43,,,,67,63,82,65,66',
',,,51,,,14,54,,,,105,42,109,49,104,52,111,,50,72,68,,44,71,,,,,69,13',
',,70,,,12,108,,,,59,62,,73,60,53,,55,,43,,,,67,63,82,65,66,,,,51,,,14',
'54,,,,105,42,109,49,104,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12',
'108,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42',
',49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,',
'44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66',
',,,51,,,14,54,,,,,42,,49,,52,124,,50,72,68,,44,71,,,,,69,13,,,70,,,12',
',,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49',
',52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55',
',43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71',
',,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,297,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49',
',52,46,,50,72,68,,44,71,47,48,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
'141,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68',
',44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,143,55,,43,,,,67,63,',
'65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,',
'70,,,12,,,,,59,62,,73,60,53,,55,146,43,,,,67,63,,65,66,,,,51,,,14,54',
',,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73',
'60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72',
'68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,303,43,,,,67,63',
',65,66,,,,51,,,14,54,,,,,42,,49,,52,46,,50,72,68,,44,71,47,48,,,69,13',
',,70,,,12,,,,,59,62,,73,60,53,,55,146,43,,,,67,63,,65,66,,,,51,,,14',
'54,,,,,42,,49,,52,46,,50,72,68,,44,71,47,48,,,69,13,,,70,,,12,,,,,59',
'62,,73,60,53,,156,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111',
',50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,372,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,46,,50,72,68,,44,71,47',
'48,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,',
'51,,,14,54,,,,,42,,49,,52,46,,50,72,68,,44,71,47,48,,,69,13,,,70,,,12',
',,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49',
',52,46,,50,72,68,,44,71,47,48,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,46,,50,72,68,,44',
'71,47,48,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65',
'66,,,,51,,,14,54,,,,,42,,49,,52,46,,50,72,68,,44,71,47,48,,,69,13,,',
'70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,',
',,42,,49,,52,46,,50,72,68,,44,71,47,48,,,69,13,,,70,,,12,,,,,59,62,',
'73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,46,,50',
'72,68,,44,71,47,48,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,',
'67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,46,,50,72,68,,44,71,47,48',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43',
',,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,',
',,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51',
',,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,',
'59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52',
'111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,357',
'43,,,189,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44',
'71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,',
',,51,,,14,54,,,,,192,209,203,210,52,204,212,205,201,199,,194,207,,,',
',69,13,213,208,206,,,12,,,,,59,62,,73,60,53,,55,211,193,,,,67,63,,65',
'66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70',
',,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42',
',49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,',
'44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66',
',,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12',
',,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49',
',52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55',
',43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71',
',,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,305,43,,,,67,63,82,65,66',
',,,51,,,14,54,,,,105,42,109,49,104,52,46,,50,72,68,,44,71,47,48,,,69',
'13,,,70,,,12,108,,,,,,,73,,,89,88,,43,,84,85,67,63,,65,66,83,59,62,51',
',60,53,54,55,,,,,,,,,,90,,,,,,,14,221,,,,,42,,49,,52,111,,50,72,68,',
'44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66',
',,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12',
',,,,59,62,,73,60,53,,55,,43,,,,67,63,82,65,66,,,,51,,,14,54,,,,105,42',
'109,49,104,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,108,,,,,,,73',
',,89,88,,43,,84,85,67,63,,65,66,83,59,62,51,,60,53,54,55,,,,,,,,,,90',
',,,,,,14,229,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12',
',,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49',
',52,46,,50,72,68,,44,71,47,48,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,',
'44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,325,55,,43,,,,67,63,,65',
'66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70',
',,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42',
',49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,',
'44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66',
',,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12',
',,,,59,62,,73,60,53,324,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42',
',49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,',
'44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53,,55,327,43,,,,67,63,,65',
'66,,,,51,,,14,54,,,,,42,,49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70',
',,12,,,,,59,62,,73,60,53,,55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,42',
',49,,52,111,,50,72,68,,44,71,,,,,69,13,,,70,,,12,,,,,59,62,,73,60,53',
',55,,43,,,,67,63,,65,66,,,,51,,,14,54,,,,,192,209,203,210,52,204,212',
'205,201,199,,194,207,,,,,69,13,213,208,206,,,12,,,,,,,,73,,,,,211,193',
',,,67,63,,65,66,82,,,51,,,,54,,101,102,103,98,93,105,,109,,104,,,94',
'96,95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,',
',82,83,106,,,249,,,,101,102,103,98,93,105,,109,,104,90,,94,96,95,97',
',,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,249,,,83',
'101,102,103,98,93,105,,109,,104,,,94,96,95,97,,90,,,,,,,,,,,,,,108,',
',,100,99,,,86,87,89,88,91,92,,84,85,,,,,82,83,233,,,,,,,101,102,103',
'98,93,105,,109,,104,90,,94,96,95,97,,,,,,,,,,,,,,,,108,,,,100,99,,,86',
'87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94',
'96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,',
',,,82,83,232,,,,,,,101,102,103,98,93,105,,109,,104,90,,94,96,95,97,',
',,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82,83,231',
',,,,,,101,102,103,98,93,105,,109,,104,90,,94,96,95,97,,,,,,,,,,,,,,',
',108,,,,100,99,,,86,87,89,88,91,92,,84,85,,,,,82,83,230,,,,,,,101,102',
'103,98,93,105,,109,,104,90,,94,96,95,97,,,,,,,,,,,,,,,,108,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104',
',219,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92',
'82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,90,',
',,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102',
'103,98,93,105,,109,,104,263,264,94,96,95,97,,90,,,,,,,,,,,,,,108,,,',
'100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109',
',104,,,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92',
'82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,90,',
',,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102',
'103,98,93,105,,109,,104,,,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,,109,,104',
',,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82',
'84,85,,,,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,90,,,,',
',,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102',
'103,98,93,105,,109,,104,,,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99',
',,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98,93,105,273,109,',
'104,,,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92',
',84,85,,,,,82,83,106,,,,,,,101,102,103,98,93,105,,109,82,104,90,,94',
'96,95,97,,,,,,,105,,109,,104,,,,,108,,,,100,99,,,86,87,89,88,91,92,',
'84,85,108,,,82,,83,,,86,87,89,88,,,,84,85,105,,109,82,104,83,90,,,,',
',,,,,,105,,109,,104,,90,,,108,,,,,,,,86,87,89,88,,,,84,85,108,,,82,',
'83,,,86,87,89,88,91,92,,84,85,105,,109,82,104,83,90,,,,,,,,,,93,105',
',109,,104,,90,94,,108,,,,,,,,86,87,89,88,91,92,,84,85,108,,,,,83,,,86',
'87,89,88,91,92,82,84,85,,,,,,83,90,,,,93,105,,109,82,104,,,94,,,,,90',
',,,93,105,,109,,104,,,94,,108,,,,,,,,86,87,89,88,91,92,,84,85,108,,',
',,83,,,86,87,89,88,91,92,82,84,85,,,,,,83,90,,,,93,105,,109,,104,,82',
'94,,,,,90,,,,,,98,93,105,,109,,104,,108,94,96,95,97,,,,86,87,89,88,91',
'92,,84,85,,,,108,,83,,,82,,,86,87,89,88,91,92,,84,85,98,93,105,90,109',
'83,104,,82,94,96,95,97,,,,,101,102,103,98,93,105,90,109,,104,,108,94',
'96,95,97,99,,,86,87,89,88,91,92,,84,85,,,,108,,83,,100,99,,,86,87,89',
'88,91,92,82,84,85,,,269,90,,83,101,102,103,98,93,105,,109,,104,,,94',
'96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85',
',,,,,83,101,102,103,98,93,105,,109,,104,,,94,96,95,97,,90,,,,,,,,,,',
',,,108,,,,100,99,,,86,87,89,88,91,92,82,84,85,,,,,,83,101,102,103,98',
'93,105,,109,,104,,,94,96,95,97,,90,,,,,,,,,,,,,,108,,,,100,99,,,86,87',
'89,88,91,92,,84,85,,287,209,286,210,83,284,212,288,282,281,,283,285',
',,,,,,213,208,289,90,287,209,286,210,,284,212,288,282,281,,283,285,',
'211,290,,,,213,208,289,287,209,286,210,,284,212,288,282,281,,283,285',
',,211,290,,,213,208,289,,,,,,,,,,,,,,,,211,290' ]
        racc_action_table = arr = ::Array.new(6559, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,132,202,0,0,238,0,199,306,207,201,228,206,154,238,40,164,306,241',
'241,117,164,241,0,145,228,132,145,315,0,126,0,315,0,0,315,0,0,0,266',
'0,0,0,0,202,235,0,0,154,199,0,207,201,0,206,117,244,241,385,385,241',
'0,385,385,142,385,385,0,140,142,270,0,0,140,0,0,0,205,205,0,241,205',
'385,0,348,204,348,131,385,204,385,241,385,385,49,385,385,385,49,385',
'385,385,385,152,152,385,385,152,274,385,203,111,385,116,203,111,205',
'5,5,205,385,5,5,303,5,303,385,331,331,276,385,385,158,385,385,124,243',
'243,385,205,243,5,385,8,8,8,8,5,227,5,205,5,5,225,5,5,5,5,5,5,5,5,280',
'124,5,5,221,124,5,150,150,5,294,296,298,243,384,384,243,5,384,384,299',
'384,384,5,107,302,236,5,5,304,5,5,46,50,50,5,243,50,384,5,305,220,105',
'309,384,310,384,243,384,384,311,384,384,384,312,384,384,384,384,313',
'46,384,384,218,46,384,317,76,384,74,64,63,50,382,382,50,384,382,382',
'330,382,382,384,134,216,333,384,384,196,384,384,335,47,195,384,50,342',
'382,384,343,41,239,260,382,351,382,50,382,382,352,382,382,382,354,382',
'382,382,382,355,359,382,382,360,361,382,39,367,382,368,371,240,6,189',
'189,1,382,189,189,389,189,393,382,395,397,,382,382,167,382,382,,,,382',
',,189,382,,,,167,189,167,189,167,189,189,,189,189,189,,189,189,,,,,189',
'189,,,189,,,189,167,,,,12,12,,189,12,12,,12,,189,,,,189,189,170,189',
'189,167,,,189,,,12,189,,,,170,12,170,12,170,12,12,,12,12,12,,12,12,',
',,,12,12,,,12,,,12,170,,,,13,13,,12,13,13,,13,,12,,170,170,12,12,171',
'12,12,170,,,12,,,13,12,,,,171,13,171,13,171,13,13,,13,13,13,,13,13,',
',,,13,13,,,13,,,13,171,,,,14,14,,13,14,14,,14,,13,,171,171,13,13,166',
'13,13,171,,,13,,,14,13,,,,166,14,166,14,166,14,14,,14,14,14,,14,14,',
',,,14,14,,,14,,,14,166,,,,363,363,,14,363,363,,363,,14,,,,14,14,172',
'14,14,166,,,14,,,363,14,,,,172,363,172,363,172,363,363,,363,363,363',
',363,363,363,363,,,363,363,,,363,,,363,172,,,,350,350,,363,350,350,',
'350,,363,,172,172,363,363,165,363,363,172,,,363,,,350,363,,,,165,350',
'165,350,165,350,350,,350,350,350,,350,350,,,,,350,350,,,350,,,350,165',
',,,192,192,,350,192,192,,192,,350,,,,350,350,112,350,350,,,,350,,,192',
'350,,,,112,192,112,192,112,192,192,,192,192,192,,192,192,,,,,192,192',
',,192,,,192,112,,,,42,42,,192,42,42,,42,,192,,,,192,192,110,192,192',
',,,192,,,42,192,,,,110,42,110,42,110,42,42,,42,42,42,,42,42,,,,,42,42',
',,42,,,42,110,,,,43,43,,42,43,43,,43,,42,,,,42,42,,42,42,,,,42,,,43',
'42,,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,,,,,44,44',
',43,44,44,,44,,43,,,,43,43,,43,43,,,,43,,,44,43,,,,,44,,44,,44,44,,44',
'44,44,,44,44,,,,,44,44,,,44,,,44,,,,,45,45,,44,45,45,,45,,44,,,,44,44',
',44,44,,,,44,,,45,44,,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,',
'45,,,45,,,,,193,193,,45,193,193,,193,,45,,,,45,45,,45,45,,,,45,,,193',
'45,,,,,193,,193,,193,193,,193,193,193,,193,193,,,,,193,193,,,193,,,193',
',,,,194,194,,193,194,194,,194,,193,,,,193,193,,193,193,,,,193,,,194',
'193,,,,,194,,194,,194,194,,194,194,194,,194,194,,,,,194,194,,,194,,',
'194,,,,,334,334,,194,334,334,,334,,194,,,,194,194,,194,194,,,,194,,',
'334,194,,,,,334,,334,,334,334,,334,334,334,,334,334,,,,,334,334,,,334',
',,334,,,,,223,223,,334,223,223,,223,223,334,,,,334,334,,334,334,,,,334',
',,223,334,,,,,223,,223,,223,223,,223,223,223,,223,223,223,223,,,223',
'223,,,223,,,223,,,,,53,53,,223,53,53,53,53,,223,,,,223,223,,223,223',
',,,223,,,53,223,,,,,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53,,,53,,',
'53,,,,,54,54,,53,54,54,54,54,,53,,,,53,53,,53,53,,,,53,,,54,53,,,,,54',
',54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,,,,,55,55,,54,55,55',
',55,55,54,,,,54,54,,54,54,,,,54,,,55,54,,,,,55,,55,,55,55,,55,55,55',
',55,55,,,,,55,55,,,55,,,55,,,,,61,61,,55,61,61,,61,,55,,,,55,55,,55',
'55,,,,55,,,61,55,,,,,61,,61,,61,61,,61,61,61,,61,61,,,,,61,61,,,61,',
',61,,,,,230,230,,61,230,230,,230,230,61,,,,61,61,,61,61,,,,61,,,230',
'61,,,,,230,,230,,230,230,,230,230,230,,230,230,230,230,,,230,230,,,230',
',,230,,,,,156,156,,230,156,156,,156,156,230,,,,230,230,,230,230,,,,230',
',,156,230,,,,,156,,156,,156,156,,156,156,156,,156,156,156,156,,,156',
'156,,,156,,,156,,,,,66,66,,156,66,66,,66,,156,,,,156,156,,156,156,,',
',156,,,66,156,,,,,66,,66,,66,66,,66,66,66,,66,66,,,,,66,66,,,66,,,66',
',,,,319,319,,66,319,319,,319,319,66,,,,66,66,,66,66,,,,66,,,319,66,',
',,,319,,319,,319,319,,319,319,319,,319,319,319,319,,,319,319,,,319,',
',319,,,,,75,75,,319,75,75,,75,,319,,,,319,319,,319,319,,,,319,,,75,319',
',,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,,,,,318,318',
',75,318,318,,318,,75,,,,75,75,,75,75,,,,75,,,318,75,,,,,318,,318,,318',
'318,,318,318,318,,318,318,318,318,,,318,318,,,318,,,318,,,,,77,77,,318',
'77,77,,77,,318,,,,318,318,,318,318,,,,318,,,77,318,,,,,77,,77,,77,77',
',77,77,77,,77,77,77,77,,,77,77,,,77,,,77,,,,,78,78,,77,78,78,,78,,77',
',,,77,77,,77,77,,,,77,,,78,77,,,,,78,,78,,78,78,,78,78,78,,78,78,78',
'78,,,78,78,,,78,,,78,,,,,79,79,,78,79,79,,79,,78,,,,78,78,,78,78,,,',
'78,,,79,78,,,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79',
',,,,80,80,,79,80,80,,80,,79,,,,79,79,,79,79,,,,79,,,80,79,,,,,80,,80',
',80,80,,80,80,80,,80,80,80,80,,,80,80,,,80,,,80,,,,,81,81,,80,81,81',
',81,,80,,,,80,80,,80,80,,,,80,,,81,80,,,,,81,,81,,81,81,,81,81,81,,81',
'81,81,81,,,81,81,,,81,,,81,,,,,82,82,,81,82,82,,82,,81,,,,81,81,,81',
'81,,,,81,,,82,81,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,',
',82,,,,,83,83,,82,83,83,,83,,82,,,,82,82,,82,82,,,,82,,,83,82,,,,,83',
',83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,,,,,84,84,,83,84,84',
',84,,83,,,,83,83,,83,83,,,,83,,,84,83,,,,,84,,84,,84,84,,84,84,84,,84',
'84,,,,,84,84,,,84,,,84,,,,,85,85,,84,85,85,,85,,84,,,,84,84,,84,84,',
',,84,,,85,84,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85',
',,,,86,86,,85,86,86,,86,,85,,,,85,85,,85,85,,,,85,,,86,85,,,,,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,,,,,87,87,,86,87,87,,87',
',86,,,,86,86,,86,86,,,,86,,,87,86,,,,,87,,87,,87,87,,87,87,87,,87,87',
',,,,87,87,,,87,,,87,,,,,88,88,,87,88,88,,88,,87,,,,87,87,,87,87,,,,87',
',,88,87,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,,,,,89',
'89,,88,89,89,,89,,88,,,,88,88,,88,88,,,,88,,,89,88,,,,,89,,89,,89,89',
',89,89,89,,89,89,,,,,89,89,,,89,,,89,,,,,90,90,,89,90,90,,90,,89,,,',
'89,89,,89,89,,,,89,,,90,89,,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90',
'90,,,90,,,90,,,,,91,91,,90,91,91,,91,,90,,,,90,90,,90,90,,,,90,,,91',
'90,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,,,,,92,92',
',91,92,92,,92,,91,,,,91,91,,91,91,,,,91,,,92,91,,,,,92,,92,,92,92,,92',
'92,92,,92,92,,,,,92,92,,,92,,,92,,,,,93,93,,92,93,93,,93,,92,,,,92,92',
',92,92,,,,92,,,93,92,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,',
'93,,,93,,,,,94,94,,93,94,94,,94,,93,,,,93,93,,93,93,,,,93,,,94,93,,',
',,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,,,,,95,95,,94,95',
'95,,95,,94,,,,94,94,,94,94,,,,94,,,95,94,,,,,95,,95,,95,95,,95,95,95',
',95,95,,,,,95,95,,,95,,,95,,,,,96,96,,95,96,96,,96,,95,,,,95,95,,95',
'95,,,,95,,,96,95,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,',
',96,,,,,97,97,,96,97,97,,97,,96,,,,96,96,,96,96,,,,96,,,97,96,,,,,97',
',97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,,,,,98,98,,97,98,98',
',98,,97,,,,97,97,,97,97,,,,97,,,98,97,,,,,98,,98,,98,98,,98,98,98,,98',
'98,,,,,98,98,,,98,,,98,,,,,99,99,,98,99,99,,99,,98,,,,98,98,,98,98,',
',,98,,,99,98,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99',
',,,,100,100,,99,100,100,,100,,99,,,,99,99,,99,99,,,,99,,,100,99,,,,',
'100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,,,,',
'101,101,,100,101,101,,101,,100,,,,100,100,,100,100,,,,100,,,101,100',
',,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101',
',,,,102,102,,101,102,102,,102,,101,,,,101,101,,101,101,,,,101,,,102',
'101,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,',
'102,,,,,103,103,,102,103,103,,103,,102,,,,102,102,,102,102,,,,102,,',
'103,102,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103',
',,103,,,,,104,104,,103,104,104,,104,,103,,,,103,103,,103,103,,,,103',
',,104,103,,,,,104,,104,,104,104,,104,104,104,,104,104,,,,,104,104,,',
'104,,,104,,,,,307,307,,104,307,307,,307,307,104,,,104,104,104,,104,104',
',,,104,,,307,104,,,,,307,,307,,307,307,,307,307,307,,307,307,,,,,307',
'307,,,307,,,307,,,,,106,106,,307,106,106,,106,,307,,,,307,307,,307,307',
',,,307,,,106,307,,,,,106,106,106,106,106,106,106,106,106,106,,106,106',
',,,,106,106,106,106,106,,,106,,,,,300,300,,106,300,300,,300,106,106',
',,,106,106,,106,106,,,,106,,,300,106,,,,,300,,300,,300,300,,300,300',
'300,,300,300,,,,,300,300,,,300,,,300,,,,,108,108,,300,108,108,,108,',
'300,,,,300,300,,300,300,,,,300,,,108,300,,,,,108,,108,,108,108,,108',
'108,108,,108,108,,,,,108,108,,,108,,,108,,,,,109,109,,108,109,109,,109',
',108,,,,108,108,,108,108,,,,108,,,109,108,,,,,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,,,,,293,293,,109,293,293,,293',
',109,,,,109,109,,109,109,,,,109,,,293,109,,,,,293,,293,,293,293,,293',
'293,293,,293,293,,,,,293,293,,,293,,,293,,,,,279,279,,293,279,279,,279',
',293,,,,293,293,,293,293,,,,293,,,279,293,,,,,279,,279,,279,279,,279',
'279,279,,279,279,,,,,279,279,,,279,,,279,,,,,278,278,,279,278,278,,278',
',279,,,,279,279,,279,279,,,,279,,,278,279,,,,,278,,278,,278,278,,278',
'278,278,,278,278,,,,,278,278,,,278,,,278,,,,,231,231,,278,231,231,,231',
'231,278,,,,278,278,168,278,278,,,,278,,,231,278,,,,168,231,168,231,168',
'231,231,,231,231,231,,231,231,231,231,,,231,231,,,231,,,231,168,,,,',
',,231,,,168,168,,231,,168,168,231,231,,231,231,168,114,114,231,,114',
'114,231,114,,,,,,,,,,168,,,,,,,114,114,,,,,114,,114,,114,114,,114,114',
'114,,114,114,,,,,114,114,,,114,,,114,,,,,275,275,,114,275,275,,275,',
'114,,,,114,114,,114,114,,,,114,,,275,114,,,,,275,,275,,275,275,,275',
'275,275,,275,275,,,,,275,275,,,275,,,275,,,,,269,269,,275,269,269,,269',
',275,,,,275,275,169,275,275,,,,275,,,269,275,,,,169,269,169,269,169',
'269,269,,269,269,269,,269,269,,,,,269,269,,,269,,,269,169,,,,,,,269',
',,169,169,,269,,169,169,269,269,,269,269,169,118,118,269,,118,118,269',
'118,,,,,,,,,,169,,,,,,,118,118,,,,,118,,118,,118,118,,118,118,118,,118',
'118,,,,,118,118,,,118,,,118,,,,,153,153,,118,153,153,,153,,118,,,,118',
'118,,118,118,,,,118,,,153,118,,,,,153,,153,,153,153,,153,153,153,,153',
'153,153,153,,,153,153,,,153,,,153,,,,,232,232,,153,232,232,,232,,153',
',,,153,153,,153,153,,,,153,,,232,153,,,,,232,,232,,232,232,,232,232',
'232,,232,232,,,,,232,232,,,232,,,232,,,,,247,247,,232,247,247,247,247',
',232,,,,232,232,,232,232,,,,232,,,247,232,,,,,247,,247,,247,247,,247',
'247,247,,247,247,,,,,247,247,,,247,,,247,,,,,234,234,,247,234,234,,234',
',247,,,,247,247,,247,247,,,,247,,,234,247,,,,,234,,234,,234,234,,234',
'234,234,,234,234,,,,,234,234,,,234,,,234,,,,,268,268,,234,268,268,,268',
',234,,,,234,234,,234,234,,,,234,,,268,234,,,,,268,,268,,268,268,,268',
'268,268,,268,268,,,,,268,268,,,268,,,268,,,,,125,125,,268,125,125,,125',
',268,,,,268,268,,268,268,,,,268,,,125,268,,,,,125,,125,,125,125,,125',
'125,125,,125,125,,,,,125,125,,,125,,,125,,,,,245,245,,125,245,245,245',
'245,,125,,,,125,125,,125,125,,,,125,,,245,125,,,,,245,,245,,245,245',
',245,245,245,,245,245,,,,,245,245,,,245,,,245,,,,,256,256,,245,256,256',
',256,,245,,,,245,245,,245,245,,,,245,,,256,245,,,,,256,,256,,256,256',
',256,256,256,,256,256,,,,,256,256,,,256,,,256,,,,,251,251,,256,251,251',
',251,251,256,,,,256,256,,256,256,,,,256,,,251,256,,,,,251,,251,,251',
'251,,251,251,251,,251,251,,,,,251,251,,,251,,,251,,,,,249,249,,251,249',
'249,,249,,251,,,,251,251,,251,251,,,,251,,,249,251,,,,,249,,249,,249',
'249,,249,249,249,,249,249,,,,,249,249,,,249,,,249,,,,,233,233,,249,233',
'233,,233,,249,,,,249,249,,249,249,,,,249,,,233,249,,,,,233,233,233,233',
'233,233,233,233,233,233,,233,233,,,,,233,233,233,233,233,,,233,,,,,',
',,233,,,,,233,233,,,,233,233,,233,233,139,,,233,,,,233,,139,139,139',
'139,139,139,,139,,139,,,139,139,139,139,,,,,,,,,,,,,,,,139,,,,139,139',
',,139,139,139,139,139,139,,139,139,,,,,265,139,265,,,265,,,,265,265',
'265,265,265,265,,265,,265,139,,265,265,265,265,,,,,,,,,,,,,,,,265,,',
',265,265,,,265,265,265,265,265,265,144,265,265,,,144,,,265,144,144,144',
'144,144,144,,144,,144,,,144,144,144,144,,265,,,,,,,,,,,,,,144,,,,144',
'144,,,144,144,144,144,144,144,,144,144,,,,,123,144,123,,,,,,,123,123',
'123,123,123,123,,123,,123,144,,123,123,123,123,,,,,,,,,,,,,,,,123,,',
',123,123,,,123,123,123,123,123,123,148,123,123,,,,,,123,148,148,148',
'148,148,148,,148,,148,,,148,148,148,148,,123,,,,,,,,,,,,,,148,,,,148',
'148,,,148,148,148,148,148,148,,148,148,,,,,122,148,122,,,,,,,122,122',
'122,122,122,122,,122,,122,148,,122,122,122,122,,,,,,,,,,,,,,,,122,,',
',122,122,,,122,122,122,122,122,122,,122,122,,,,,121,122,121,,,,,,,121',
'121,121,121,121,121,,121,,121,122,,121,121,121,121,,,,,,,,,,,,,,,,121',
',,,121,121,,,121,121,121,121,121,121,,121,121,,,,,119,121,119,,,,,,',
'119,119,119,119,119,119,,119,,119,121,,119,119,119,119,,,,,,,,,,,,,',
',,119,,,,119,119,,,119,119,119,119,119,119,113,119,119,,,,,,119,113',
'113,113,113,113,113,,113,,113,,113,113,113,113,113,,119,,,,,,,,,,,,',
',113,,,,113,113,,,113,113,113,113,113,113,155,113,113,,,,,,113,155,155',
'155,155,155,155,,155,,155,,,155,155,155,155,,113,,,,,,,,,,,,,,155,,',
',155,155,,,155,155,155,155,155,155,323,155,155,,,,,,155,323,323,323',
'323,323,323,,323,,323,155,155,323,323,323,323,,155,,,,,,,,,,,,,,323',
',,,323,323,,,323,323,323,323,323,323,326,323,323,,,,,,323,326,326,326',
'326,326,326,,326,,326,,,326,326,326,326,,323,,,,,,,,,,,,,,326,,,,326',
'326,,,326,326,326,326,326,326,332,326,326,,,,,,326,332,332,332,332,332',
'332,,332,,332,,,332,332,332,332,,326,,,,,,,,,,,,,,332,,,,332,332,,,332',
'332,332,332,332,332,215,332,332,,,,,,332,215,215,215,215,215,215,,215',
',215,,,215,215,215,215,,332,,,,,,,,,,,,,,215,,,,215,215,,,215,215,215',
'215,215,215,340,215,215,,,,,,215,340,340,340,340,340,340,,340,,340,',
',340,340,340,340,,215,,,,,,,,,,,,,,340,,,,340,340,,,340,340,340,340',
'340,340,341,340,340,,,,,,340,341,341,341,341,341,341,,341,,341,,,341',
'341,341,341,,340,,,,,,,,,,,,,,341,,,,341,341,,,341,341,341,341,341,341',
'347,341,341,,,,,,341,347,347,347,347,347,347,,347,,347,,,347,347,347',
'347,,341,,,,,,,,,,,,,,347,,,,347,347,,,347,347,347,347,347,347,191,347',
'347,,,,,,347,191,191,191,191,191,191,191,191,,191,,,191,191,191,191',
',347,,,,,,,,,,,,,,191,,,,191,191,,,191,191,191,191,191,191,,191,191',
',,,,11,191,11,,,,,,,11,11,11,11,11,11,,11,173,11,191,,11,11,11,11,,',
',,,,173,,173,,173,,,,,11,,,,11,11,,,11,11,11,11,11,11,,11,11,173,,,174',
',11,,,173,173,173,173,,,,173,173,174,,174,175,174,173,11,,,,,,,,,,,175',
',175,,175,,173,,,174,,,,,,,,174,174,174,174,,,,174,174,175,,,176,,174',
',,175,175,175,175,175,175,,175,175,176,,176,177,176,175,174,,,,,,,,',
',177,177,,177,,177,,175,177,,176,,,,,,,,176,176,176,176,176,176,,176',
'176,177,,,,,176,,,177,177,177,177,177,177,178,177,177,,,,,,177,176,',
',,178,178,,178,179,178,,,178,,,,,177,,,,179,179,,179,,179,,,179,,178',
',,,,,,,178,178,178,178,178,178,,178,178,179,,,,,178,,,179,179,179,179',
'179,179,180,179,179,,,,,,179,178,,,,180,180,,180,,180,,181,180,,,,,179',
',,,,,181,181,181,,181,,181,,180,181,181,181,181,,,,180,180,180,180,180',
'180,,180,180,,,,181,,180,,,182,,,181,181,181,181,181,181,,181,181,182',
'182,182,180,182,181,182,,183,182,182,182,182,,,,,183,183,183,183,183',
'183,181,183,,183,,182,183,183,183,183,182,,,182,182,182,182,182,182',
',182,182,,,,183,,182,,183,183,,,183,183,183,183,183,183,186,183,183',
',,186,182,,183,186,186,186,186,186,186,,186,,186,,,186,186,186,186,',
'183,,,,,,,,,,,,,,186,,,,186,186,,,186,186,186,186,186,186,185,186,186',
',,,,,186,185,185,185,185,185,185,,185,,185,,,185,185,185,185,,186,,',
',,,,,,,,,,,185,,,,185,185,,,185,185,185,185,185,185,184,185,185,,,,',
',185,184,184,184,184,184,184,,184,,184,,,184,184,184,184,,185,,,,,,',
',,,,,,,184,,,,184,184,,,184,184,184,184,184,184,,184,184,,277,277,277',
'277,184,277,277,277,277,277,,277,277,,,,,,,277,277,277,184,272,272,272',
'272,,272,272,272,272,272,,272,272,,277,277,,,,272,272,272,214,214,214',
'214,,214,214,214,214,214,,214,214,,,272,272,,,214,214,214,,,,,,,,,,',
',,,,,214,214' ]
        racc_action_check = arr = ::Array.new(6559, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   297,   nil,   nil,   nil,   116,   281,   nil,    79,   nil,
   nil,  5901,   352,   411,   470,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   262,
   -55,   237,   706,   765,   824,   883,   186,   210,   nil,    58,
   194,   nil,   nil,  1178,  1237,  1296,   nil,   nil,   nil,   nil,
   nil,  1355,   nil,   158,   162,   nil,  1532,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   232,  1650,   217,  1768,  1827,  1886,
  1945,  2004,  2063,  2122,  2181,  2240,  2299,  2358,  2417,  2476,
  2535,  2594,  2653,  2712,  2771,  2830,  2889,  2948,  3007,  3066,
  3125,  3184,  3243,  3302,  3361,   164,  3479,   178,  3597,  3656,
   716,    75,   657,  5354,  3970,   nil,   105,   -15,  4166,  5300,
   nil,  5239,  5178,  5063,   127,  4520,     5,   nil,   nil,   nil,
   nil,    62,   -11,   nil,   225,   nil,   nil,   nil,   nil,  4887,
    61,   nil,    57,   nil,  5002,    15,   nil,   nil,  5117,   nil,
   166,   nil,   102,  4225,   -22,  5408,  1473,   nil,   120,   nil,
   nil,   nil,   nil,   nil,     9,   598,   480,   303,  3902,  4098,
   362,   421,   539,  5918,  5961,  5978,  6021,  6038,  6092,  6109,
  6163,  6183,  6228,  6248,  6410,  6356,  6302,   nil,   nil,   293,
   nil,  5840,   647,   942,  1001,   214,   238,   nil,   nil,    -4,
   nil,    -1,    -9,    74,    49,    76,     1,    -2,   nil,   nil,
   nil,   nil,   nil,   nil,  6488,  5624,   199,   nil,   202,   nil,
   191,    96,   nil,  1119,   nil,   141,   nil,   133,    -1,   nil,
  1414,  3892,  4284,  4815,  4402,     4,   151,   nil,   -21,   255,
   284,    17,   nil,   135,    16,  4579,   nil,  4343,   nil,  4756,
   nil,  4697,   nil,   nil,   nil,   nil,  4638,   nil,   nil,   nil,
   252,   nil,   nil,   nil,   nil,  4948,    30,   nil,  4461,  4088,
    58,   nil,  6466,   nil,    99,  4029,   120,  6443,  3833,  3774,
   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  3715,   146,   nil,   164,   nil,   104,   147,
  3538,   nil,   178,    91,   182,   170,    -4,  3420,   nil,   164,
   195,   171,   207,   213,   nil,    -8,   nil,   216,  1709,  1591,
   nil,   nil,   nil,  5462,   nil,   nil,  5516,   nil,   nil,   nil,
   171,    48,  5570,   238,  1060,   241,   nil,   nil,   nil,   nil,
  5678,  5732,   249,   191,   nil,   nil,   nil,  5786,    52,   nil,
   588,   258,   239,   nil,   267,   272,   nil,   nil,   nil,   272,
   275,   276,   nil,   529,   nil,   nil,   nil,   262,   281,   nil,
   nil,   282,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   234,   nil,   175,    57,   nil,   nil,   nil,   291,
   nil,   nil,   nil,   293,   nil,   295,   nil,   296,   nil,   nil,
   nil,   nil,   nil ]

racc_action_default = [
  -230,  -231,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -108,  -231,  -231,  -231,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -73,
   -74,   -78,  -231,  -231,  -231,  -231,  -231,  -119,  -121,  -231,
  -231,  -157,  -167,  -231,  -231,  -231,  -180,  -181,  -182,  -183,
  -184,  -231,  -186,  -231,  -197,  -200,  -231,  -205,  -206,  -207,
  -208,  -209,  -210,  -211,  -231,  -231,    -7,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,  -231,
  -231,  -231,  -231,  -231,  -231,  -231,  -128,  -123,  -230,  -230,
   -28,  -231,   -35,  -231,  -231,   -75,  -231,  -231,  -231,  -231,
   -85,  -231,  -231,  -231,  -231,  -231,  -230,  -138,  -158,  -159,
  -120,  -230,  -230,  -147,  -149,  -150,  -151,  -152,  -153,   -43,
  -231,  -170,  -231,  -173,  -231,  -231,  -176,  -177,  -190,  -185,
  -231,  -193,  -231,  -231,  -231,  -231,  -231,   403,    -6,    -9,
   -12,   -13,   -14,   -15,  -231,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -25,   -26,   -27,   -29,   -30,   -31,   -32,   -33,
   -34,   -36,   -37,   -38,   -39,   -40,  -231,   -41,  -103,  -231,
   -79,  -231,  -223,  -229,  -217,  -214,  -212,  -117,  -129,  -206,
  -132,  -210,  -231,  -220,  -218,  -226,  -208,  -209,  -216,  -221,
  -222,  -224,  -225,  -227,  -128,  -127,  -231,  -126,  -231,   -42,
  -212,   -70,   -80,  -231,   -83,  -212,  -163,  -166,  -231,   -77,
  -231,  -231,  -231,  -128,  -231,  -214,  -230,  -160,  -231,  -231,
  -231,  -231,  -155,  -231,  -231,  -231,  -168,  -231,  -171,  -231,
  -174,  -231,  -187,  -188,  -189,  -191,  -231,  -194,  -195,  -196,
  -212,  -198,  -201,  -203,  -204,  -108,  -231,   -17,  -231,  -231,
  -212,  -105,  -128,  -116,  -231,  -215,  -231,  -213,  -231,  -231,
  -212,  -131,  -133,  -217,  -218,  -219,  -220,  -223,  -226,  -228,
  -229,  -124,  -125,  -213,  -231,   -72,  -231,   -82,  -231,  -213,
  -231,   -76,  -231,   -88,  -231,   -94,  -231,  -231,   -98,  -214,
  -212,  -214,  -231,  -231,  -141,  -231,  -161,  -212,  -230,  -231,
  -148,  -156,  -154,   -44,  -169,  -172,  -179,  -175,  -178,  -192,
  -231,  -231,  -107,  -231,  -213,  -212,  -111,  -118,  -112,  -130,
  -134,  -135,  -231,   -69,   -81,   -84,  -164,  -165,   -88,   -87,
  -231,  -231,   -94,   -93,  -231,  -231,  -102,   -97,   -99,  -231,
  -231,  -231,  -114,  -230,  -142,  -143,  -144,  -231,  -231,  -139,
  -140,  -231,  -146,  -199,  -202,  -104,  -106,  -115,  -122,   -71,
   -86,   -89,  -231,   -92,  -231,  -231,  -109,  -110,  -113,  -231,
  -162,  -136,  -145,  -231,   -91,  -231,   -96,  -231,  -101,  -137,
   -90,   -95,  -100 ]

racc_goto_table = [
     2,   115,     4,   131,   110,   112,   113,   149,   137,   274,
   196,   262,   188,   135,   195,   225,   353,   236,   187,   368,
   349,   320,   239,   321,   308,   160,   161,   162,   163,   216,
   218,   159,   337,   235,   119,   121,   122,   123,   276,    76,
   272,   355,   140,   142,   339,   139,   139,   144,   270,   312,
   307,   381,   260,   148,   313,   364,   240,   222,   155,   346,
   328,   257,   294,   383,   389,   380,   258,   298,     3,   255,
   256,   164,   254,   151,   139,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   271,   191,   358,
   215,   215,   330,   220,   153,     1,   139,   228,   nil,   158,
   139,   nil,   333,   nil,   nil,   nil,   nil,   191,   280,   nil,
   nil,   nil,   342,   359,   nil,   361,   nil,   nil,   237,   nil,
   nil,   nil,   nil,   237,   242,   nil,   317,   310,   nil,   nil,
   nil,   309,   311,   nil,   nil,   nil,   nil,   nil,   265,   nil,
   nil,   nil,   360,   259,   nil,   nil,   266,   131,   nil,   367,
   nil,   nil,   nil,   137,   nil,   nil,   nil,   nil,   135,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   335,   377,   nil,   nil,
   nil,   186,   295,   nil,   119,   121,   122,   374,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   137,
   nil,   137,   329,   nil,   135,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   296,   139,   191,   191,   nil,   nil,   nil,
   302,   304,   nil,   nil,   nil,   nil,   nil,   323,   314,   323,
   nil,   326,   376,   144,   nil,   nil,   nil,   nil,   148,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   323,   332,   nil,   nil,   nil,   nil,   nil,   191,   nil,   365,
   340,   341,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   323,   nil,   nil,   nil,   nil,
   nil,   nil,   347,   nil,   nil,   nil,   nil,   nil,   nil,   139,
   nil,   nil,   nil,   nil,   379,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   371,
   370,   nil,   nil,   nil,   nil,   nil,   186,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   370,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   393,   nil,   395,   397 ]

racc_goto_check = [
     2,    40,     4,    65,    10,    10,    10,    82,    32,    56,
    57,    89,    52,    38,    55,    45,    48,    66,    13,    67,
    47,    73,    66,    73,    50,     8,     8,     8,     8,    61,
    61,     7,    58,    55,    10,    10,    10,    10,    39,     6,
    59,    51,    12,    12,    62,    10,    10,    10,    53,    56,
    49,    46,    45,    10,    69,    70,    72,    44,    10,    75,
    77,    78,    39,    48,    67,    47,    79,    39,     3,    83,
    84,    12,    86,    87,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    52,    10,    50,
    10,    10,    39,    12,    88,     1,    10,    12,   nil,     6,
    10,   nil,    39,   nil,   nil,   nil,   nil,    10,    57,   nil,
   nil,   nil,    39,    56,   nil,    56,   nil,   nil,     4,   nil,
   nil,   nil,   nil,     4,     4,   nil,    45,    57,   nil,   nil,
   nil,    55,    55,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,    39,     2,   nil,   nil,     2,    65,   nil,    39,
   nil,   nil,   nil,    32,   nil,   nil,   nil,   nil,    38,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    57,    39,   nil,   nil,
   nil,    10,    40,   nil,    10,    10,    10,    89,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32,
   nil,    32,    82,   nil,    38,   nil,    38,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,    10,    10,    10,   nil,   nil,   nil,
     2,     2,   nil,   nil,   nil,   nil,   nil,    10,     4,    10,
   nil,    10,    52,    10,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,    65,
    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
     4,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   105,     0,    68,     2,   nil,    34,   -46,   -53,   nil,
    -8,   nil,   -11,   -86,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -42,   nil,   nil,   nil,   nil,   nil,   -37,  -158,
   -39,   nil,   nil,   nil,   -59,  -102,  -299,  -283,  -289,  -182,
  -208,  -265,   -92,  -141,   nil,   -92,  -186,   -96,  -243,  -151,
   nil,   -79,  -233,   nil,   nil,   -46,  -109,  -299,   nil,  -182,
  -260,   nil,   -76,  -220,   nil,  -240,   nil,  -191,   -91,   -86,
   nil,   nil,   -54,   -81,   -80,   nil,   -78,    10,    40,  -144 ]

racc_goto_default = [
   nil,   nil,   369,   nil,   217,     5,     6,     7,     8,     9,
    11,    10,   306,   nil,    15,    39,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,   nil,
   nil,    40,    41,   116,   nil,   nil,   120,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   197,   nil,
   107,   nil,   198,   202,   200,   127,   nil,   nil,   126,   nil,
   nil,   132,   nil,   133,   134,   226,   145,   147,    56,    57,
    58,    61,   nil,   nil,   nil,   150,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 91, :_reduce_1,
  1, 91, :_reduce_2,
  1, 91, :_reduce_none,
  1, 92, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  1, 98, :_reduce_11,
  3, 98, :_reduce_12,
  3, 98, :_reduce_13,
  3, 98, :_reduce_14,
  3, 98, :_reduce_15,
  1, 100, :_reduce_none,
  4, 100, :_reduce_17,
  3, 100, :_reduce_18,
  3, 100, :_reduce_19,
  3, 100, :_reduce_20,
  3, 100, :_reduce_21,
  3, 100, :_reduce_22,
  3, 100, :_reduce_23,
  3, 100, :_reduce_24,
  3, 100, :_reduce_25,
  3, 100, :_reduce_26,
  3, 100, :_reduce_27,
  2, 100, :_reduce_28,
  3, 100, :_reduce_29,
  3, 100, :_reduce_30,
  3, 100, :_reduce_31,
  3, 100, :_reduce_32,
  3, 100, :_reduce_33,
  3, 100, :_reduce_34,
  2, 100, :_reduce_35,
  3, 100, :_reduce_36,
  3, 100, :_reduce_37,
  3, 100, :_reduce_38,
  3, 100, :_reduce_39,
  3, 100, :_reduce_40,
  3, 100, :_reduce_41,
  3, 100, :_reduce_42,
  1, 102, :_reduce_43,
  3, 102, :_reduce_44,
  1, 101, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 123, :_reduce_67,
  1, 123, :_reduce_68,
  5, 104, :_reduce_69,
  3, 104, :_reduce_70,
  6, 104, :_reduce_71,
  4, 104, :_reduce_72,
  1, 104, :_reduce_73,
  1, 108, :_reduce_74,
  2, 108, :_reduce_75,
  4, 131, :_reduce_76,
  3, 131, :_reduce_77,
  1, 131, :_reduce_78,
  3, 132, :_reduce_79,
  2, 130, :_reduce_80,
  3, 134, :_reduce_81,
  2, 134, :_reduce_82,
  2, 133, :_reduce_83,
  4, 133, :_reduce_84,
  2, 111, :_reduce_85,
  5, 136, :_reduce_86,
  4, 136, :_reduce_87,
  0, 137, :_reduce_none,
  2, 137, :_reduce_89,
  4, 137, :_reduce_90,
  3, 137, :_reduce_91,
  6, 112, :_reduce_92,
  5, 112, :_reduce_93,
  0, 138, :_reduce_none,
  4, 138, :_reduce_95,
  3, 138, :_reduce_96,
  5, 110, :_reduce_97,
  1, 139, :_reduce_98,
  2, 139, :_reduce_99,
  5, 140, :_reduce_100,
  4, 140, :_reduce_101,
  1, 141, :_reduce_102,
  1, 103, :_reduce_none,
  4, 103, :_reduce_104,
  1, 143, :_reduce_105,
  3, 143, :_reduce_106,
  3, 142, :_reduce_107,
  1, 99, :_reduce_108,
  6, 99, :_reduce_109,
  6, 99, :_reduce_110,
  5, 99, :_reduce_111,
  5, 99, :_reduce_112,
  6, 99, :_reduce_113,
  5, 99, :_reduce_114,
  4, 148, :_reduce_115,
  1, 149, :_reduce_116,
  1, 145, :_reduce_117,
  3, 145, :_reduce_118,
  1, 144, :_reduce_119,
  2, 144, :_reduce_120,
  1, 144, :_reduce_121,
  6, 109, :_reduce_122,
  2, 109, :_reduce_123,
  3, 150, :_reduce_124,
  3, 150, :_reduce_125,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 147, :_reduce_128,
  1, 147, :_reduce_129,
  3, 147, :_reduce_130,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  3, 152, :_reduce_134,
  3, 152, :_reduce_135,
  6, 113, :_reduce_136,
  7, 114, :_reduce_137,
  1, 158, :_reduce_138,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_142,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  6, 115, :_reduce_145,
  5, 115, :_reduce_146,
  1, 161, :_reduce_147,
  3, 161, :_reduce_148,
  1, 163, :_reduce_149,
  1, 163, :_reduce_150,
  1, 163, :_reduce_151,
  1, 163, :_reduce_none,
  1, 164, :_reduce_153,
  3, 164, :_reduce_154,
  1, 162, :_reduce_none,
  2, 162, :_reduce_156,
  1, 117, :_reduce_157,
  1, 155, :_reduce_158,
  1, 155, :_reduce_159,
  1, 156, :_reduce_160,
  2, 156, :_reduce_161,
  4, 156, :_reduce_162,
  1, 135, :_reduce_163,
  3, 135, :_reduce_164,
  3, 165, :_reduce_165,
  1, 165, :_reduce_166,
  1, 107, :_reduce_167,
  3, 118, :_reduce_168,
  4, 118, :_reduce_169,
  2, 118, :_reduce_170,
  3, 118, :_reduce_171,
  4, 118, :_reduce_172,
  2, 118, :_reduce_173,
  3, 121, :_reduce_174,
  4, 121, :_reduce_175,
  2, 121, :_reduce_176,
  1, 166, :_reduce_177,
  3, 166, :_reduce_178,
  3, 167, :_reduce_179,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 128, :_reduce_none,
  1, 168, :_reduce_183,
  1, 168, :_reduce_184,
  2, 169, :_reduce_185,
  1, 171, :_reduce_186,
  1, 173, :_reduce_187,
  1, 174, :_reduce_188,
  2, 172, :_reduce_189,
  1, 175, :_reduce_190,
  1, 176, :_reduce_191,
  2, 176, :_reduce_192,
  2, 170, :_reduce_193,
  2, 177, :_reduce_194,
  2, 177, :_reduce_195,
  3, 93, :_reduce_196,
  0, 178, :_reduce_197,
  2, 178, :_reduce_198,
  4, 178, :_reduce_199,
  1, 116, :_reduce_200,
  3, 116, :_reduce_201,
  5, 116, :_reduce_202,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 124, :_reduce_205,
  1, 127, :_reduce_206,
  1, 125, :_reduce_207,
  1, 126, :_reduce_208,
  1, 120, :_reduce_209,
  1, 119, :_reduce_210,
  1, 122, :_reduce_211,
  0, 129, :_reduce_none,
  1, 129, :_reduce_213,
  0, 146, :_reduce_none,
  1, 146, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  0, 94, :_reduce_230 ]

racc_reduce_n = 231

racc_shift_n = 403

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :LOW => 83,
  :HIGH => 84,
  :CALL => 85,
  :LISTSTART => 86,
  :MODULO => 87,
  :TITLE_COLON => 88,
  :CASE_COLON => 89 }

racc_nt_base = 90

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 135)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 136)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 170)
  def _reduce_68(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_72(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_74(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_78(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_79(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_80(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_82(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_83(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_84(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 244)
  def _reduce_85(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_87(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_89(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_90(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_91(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_93(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 94 omitted

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_95(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_96(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_97(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_98(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_99(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_101(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_104(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_105(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_106(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_107(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_108(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 399)
  def _reduce_112(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_114(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_115(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_119(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_121(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 459)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_124(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_125(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_130(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 510)
  def _reduce_136(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_137(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_138(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_142(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_147(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_148(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_151(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_153(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_154(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_157(val, _values, result)
     result = Factory.QNAME(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_158(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_159(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_163(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_165(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_166(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_167(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_168(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_170(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_171(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_172(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_173(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_174(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_175(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_176(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_177(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_178(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_179(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_185(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_186(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_187(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_188(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_189(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_190(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_192(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 685)
  def _reduce_193(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_194(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_195(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_196(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_197(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_198(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_199(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_200(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_201(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_202(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_205(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_206(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_207(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_208(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_209(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_210(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_211(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 212 omitted

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_213(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

module_eval(<<'.,.,', 'egrammar.ra', 749)
  def _reduce_230(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
